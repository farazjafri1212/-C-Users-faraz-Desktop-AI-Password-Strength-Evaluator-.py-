import re
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

# -------------------------------
# Rule-Based Scoring Function
# -------------------------------
def rule_based_score(password):
    score = 0
    if len(password) >= 8:
        score += 1
    if re.search(r"[A-Z]", password):
        score += 1
    if re.search(r"[a-z]", password):
        score += 1
    if re.search(r"[0-9]", password):
        score += 1
    if re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        score += 1
    return score

# -------------------------------
# Dataset Generation Function
# -------------------------------
def create_dataset():
    data = {
        'password': [
            '123456', 'password', 'P@ssw0rd', 'admin123', 'IloveYou!',
            'qwerty', 'LetMe!n', 'StrongPass123!', 'hello123', 'Tr1cky@Password'
        ]
    }
    df = pd.DataFrame(data)
    df['length'] = df['password'].apply(len)
    df['has_upper'] = df['password'].apply(lambda x: int(bool(re.search(r'[A-Z]', x))))
    df['has_lower'] = df['password'].apply(lambda x: int(bool(re.search(r'[a-z]', x))))
    df['has_digit'] = df['password'].apply(lambda x: int(bool(re.search(r'[0-9]', x))))
    df['has_special'] = df['password'].apply(lambda x: int(bool(re.search(r'[!@#$%^&*(),.?":{}|<>]', x))))
    df['score'] = df['password'].apply(rule_based_score)

    # Labels: 0=Weak, 1=Moderate, 2=Strong
    df['strength'] = df['score'].apply(lambda x: 0 if x <= 2 else (1 if x <= 4 else 2))
    return df

# -------------------------------
# Load Dataset
# -------------------------------
df = create_dataset()
X = df[['length', 'has_upper', 'has_lower', 'has_digit', 'has_special']]
y = df['strength']

# -------------------------------
# Train the ML Model
# -------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)

# -------------------------------
# Model Evaluation
# -------------------------------
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred, zero_division=0))

# -------------------------------
# Function to Evaluate New Passwords
# -------------------------------
def evaluate_password(password):
    length = len(password)
    has_upper = int(bool(re.search(r'[A-Z]', password)))
    has_lower = int(bool(re.search(r'[a-z]', password)))
    has_digit = int(bool(re.search(r'[0-9]', password)))
    has_special = int(bool(re.search(r'[!@#$%^&*(),.?":{}|<>]', password)))

    features = pd.DataFrame([[length, has_upper, has_lower, has_digit, has_special]],
                            columns=['length', 'has_upper', 'has_lower', 'has_digit', 'has_special']
                            )
    prediction = model.predict(features)[0]
    levels = ['Weak', 'Moderate', 'Strong']
    return levels[prediction]

# -------------------------------
# Loop Until User Types 'exit'
# -------------------------------
while True:
    user_password = input("Enter a password to evaluate its strength (type 'exit' to quit): ")
    if user_password.lower() == 'exit':
        print("Exiting password evaluator. Goodbye!")
        break
    strength_level = evaluate_password(user_password)
    print(f"Password '{user_password}' is classified as: {strength_level}\n")
